package cn.hackedmc.urticaria.module.impl.exploit.disabler;

import cn.hackedmc.urticaria.component.impl.render.notificationcomponent.Notification;
import cn.hackedmc.urticaria.component.impl.render.notificationcomponent.NotificationComponent;
import cn.hackedmc.urticaria.module.impl.exploit.Disabler;
import cn.hackedmc.urticaria.newevent.Listener;
import cn.hackedmc.urticaria.newevent.annotations.EventLink;
import cn.hackedmc.urticaria.newevent.impl.motion.PreMotionEvent;
import cn.hackedmc.urticaria.newevent.impl.other.WorldChangeEvent;
import cn.hackedmc.urticaria.newevent.impl.packet.PacketReceiveEvent;
import cn.hackedmc.urticaria.newevent.impl.packet.PacketSendEvent;
import cn.hackedmc.urticaria.util.math.MathUtil;
import cn.hackedmc.urticaria.util.packet.PacketUtil;
import cn.hackedmc.urticaria.util.player.PlayerUtil;
import cn.hackedmc.urticaria.value.Mode;
import cn.hackedmc.urticaria.value.impl.BooleanValue;
import com.viaversion.viarewind.protocol.protocol1_8to1_9.Protocol1_8To1_9;
import com.viaversion.viaversion.api.Via;
import com.viaversion.viaversion.api.protocol.packet.PacketWrapper;
import com.viaversion.viaversion.api.protocol.version.ProtocolVersion;
import com.viaversion.viaversion.api.type.Type;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.viamcp.ViaMCP;

public class WatchdogDisabler extends Mode<Disabler> {
    public final BooleanValue windowClick = new BooleanValue("Window click", this, false);
    private final BooleanValue offHand = new BooleanValue("Off Hand", this, false);
    private final BooleanValue lowHop = new BooleanValue("Mini Motion", this, false);

    public WatchdogDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    private boolean jumped;
    private boolean shouldJump;
    private int ticks;

    @EventLink
    public final Listener<WorldChangeEvent> onWorld = event -> {
        if (ViaMCP.getInstance().getVersion() <= 47) {
            NotificationComponent.post("Disabler", "Most bypasses only work in Via Version.", 10000);
        }
    };

    @EventLink
    public final Listener<PreMotionEvent> onPreMotion = event -> {
        if (lowHop.getValue()) {
            if (PlayerUtil.isInLobby() || mc.isSingleplayer()) return;

            if (shouldJump && mc.thePlayer.onGround) {
                mc.thePlayer.jump();
                shouldJump = false;
                jumped = true;
            } else if (mc.thePlayer.offGroundTicks >= 9 && jumped) {
                if (mc.thePlayer.offGroundTicks % 2 == 0) {
                    event.setPosX(event.getPosX() + MathUtil.getRandom(0.09, 0.12));
                }
                mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0.0;
            }
        }
    };

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        if (mc.isSingleplayer()) return;
        final Packet<?> packet = event.getPacket();

        if (offHand.getValue() && ViaMCP.getInstance().getVersion() > ProtocolVersion.v1_8.getVersion() && packet instanceof C08PacketPlayerBlockPlacement) {
            final C08PacketPlayerBlockPlacement wrapped = (C08PacketPlayerBlockPlacement) packet;

            if (wrapped.getPosition().equals(new BlockPos(-1, -1, -1)) && wrapped.getPlacedBlockDirection() == 255) {
                event.setCancelled();

                mc.getNetHandler().addToSendQueueUnregistered(packet);

                PacketWrapper packetWrapper = PacketWrapper.create(29, null, Via.getManager().getConnectionManager().getConnections().iterator().next());
                packetWrapper.write(Type.VAR_INT, 1);
                PacketUtil.sendToServer(packetWrapper, Protocol1_8To1_9.class, true, true);
            }
        }
    };

    @EventLink
    public final Listener<PacketReceiveEvent> onPacketReceive = event -> {
        final Packet<?> packet = event.getPacket();

        if (PlayerUtil.isInLobby()) return;

        if (lowHop.getValue() && packet instanceof S08PacketPlayerPosLook) {
            ticks = ticks + 1;
            if (ticks == 20) {
                jumped = false;
                ticks = 0;
            }
        }
    };

    @EventLink
    public final Listener<WorldChangeEvent> onWorldChange = event -> {
        this.shouldJump = true;
        this.jumped = false;
        this.ticks = 0;
    };

    @Override
    public void onEnable() {
        this.shouldJump = true;
        this.jumped = false;
        this.ticks = 0;
    }
}