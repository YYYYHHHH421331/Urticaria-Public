package cn.hackedmc.urticaria.module.impl.exploit.disabler;

import cn.hackedmc.urticaria.Client;
import cn.hackedmc.urticaria.component.impl.player.RotationComponent;
import cn.hackedmc.urticaria.component.impl.player.SlotComponent;
import cn.hackedmc.urticaria.module.impl.exploit.Disabler;
import cn.hackedmc.urticaria.module.impl.player.Scaffold;
import cn.hackedmc.urticaria.newevent.Listener;
import cn.hackedmc.urticaria.newevent.Priorities;
import cn.hackedmc.urticaria.newevent.annotations.EventLink;
import cn.hackedmc.urticaria.newevent.impl.motion.PostMotionEvent;
import cn.hackedmc.urticaria.newevent.impl.other.ClientTickEvent;
import cn.hackedmc.urticaria.newevent.impl.other.WorldChangeEvent;
import cn.hackedmc.urticaria.newevent.impl.packet.PacketReceiveEvent;
import cn.hackedmc.urticaria.newevent.impl.packet.PacketSendEvent;
import cn.hackedmc.urticaria.util.RandomUtil;
import cn.hackedmc.urticaria.util.packet.PacketUtil;
import cn.hackedmc.urticaria.value.Mode;
import cn.hackedmc.urticaria.value.impl.BooleanValue;
import io.netty.buffer.Unpooled;
import net.minecraft.block.BlockAir;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.client.*;
import net.minecraft.util.BlockPos;

import java.util.concurrent.LinkedBlockingQueue;

public class GrimACDisabler extends Mode<Disabler> {
    public GrimACDisabler(String name, Disabler parent) {
        super(name, parent);
    }
    public final BooleanValue post = new BooleanValue("Post", this, false);
    private final BooleanValue noSlowBQuickMarco = new BooleanValue("Double C09",this,false);
    private final BooleanValue validC0F = new BooleanValue("Valid Transaction", this, false);
    private final BooleanValue badPacketsA = new BooleanValue("Bad Packets A", this, false);
    private final BooleanValue badPacketsF = new BooleanValue("Bad Packets F", this, false);
    private final BooleanValue badPacketsG = new BooleanValue("Bad Packets G", this, false);
    private final BooleanValue fastBreak = new BooleanValue("Fast Break", this, false);
    private final BooleanValue higherVersion = new BooleanValue("Move 1.17+", this, false);
    private final BooleanValue place = new BooleanValue("Any Place", this, false);
    private final BooleanValue withoutPlace = new BooleanValue("Without Place", this, false);

    private boolean lastPacketIsItemChange;
    public static int inGameTick;
    private boolean hasTickUpdate;
    private int lastSlot;
    private boolean sprinting;
    private boolean sneaking;

    private Scaffold scaffold;

    public LinkedBlockingQueue<Packet<INetHandlerPlayClient>> packets = new LinkedBlockingQueue<>();

    public boolean usePost() {
        if (scaffold == null) scaffold = getModule(Scaffold.class);
        return post.getValue() && mc.thePlayer != null && mc.theWorld != null && mc.thePlayer.isEntityAlive() && inGameTick >= 20 && (!withoutPlace.getValue() || !scaffold.isEnabled());
    }

    @Override
    public void onEnable() {
        reset();
    }

    @EventLink
    private final Listener<WorldChangeEvent> onWorldChange = event -> {
        release();
        reset();
    };

    @Override
    public void onDisable() {
        release();
    }

    @EventLink(value = Priorities.VERY_HIGH)
    private final Listener<PostMotionEvent> onMotionPost = event -> {
        release();
    };

    @EventLink
    private final Listener<ClientTickEvent> onClientTick = event -> {
        if (mc.thePlayer == null || mc.theWorld == null) {
            reset();
        }
    };

    @EventLink(value = Priorities.VERY_LOW)
    private final Listener<PacketSendEvent> onPacketSend = event -> {
        if (mc.getNetHandler() == null || mc.thePlayer == null || mc.theWorld == null) return;

        Packet<?> packet = event.getPacket();

        if (validC0F.getValue()) {
            if (packet instanceof C03PacketPlayer) {
                if (!hasTickUpdate) {
                    mc.getNetHandler().addToSendQueueUnregistered(new C0FPacketConfirmTransaction(RandomUtil.nextInt(1000, 2000000), (short) RandomUtil.nextInt(1, 10000), true));
                }

                hasTickUpdate = false;
            }

            if (packet instanceof C0FPacketConfirmTransaction && !event.isCancelled()) {
                hasTickUpdate = true;
            }
        }

        if (noSlowBQuickMarco.getValue()) {
            if (packet instanceof C09PacketHeldItemChange) {
                if (lastPacketIsItemChange) mc.getNetHandler().addToSendQueueUnregistered(new C17PacketCustomPayload("MadeByLvZiQiao", new PacketBuffer(Unpooled.buffer())));
                lastPacketIsItemChange = true;
            } else {
                lastPacketIsItemChange = false;
            }
        }

        if (packet instanceof C09PacketHeldItemChange) {
            final C09PacketHeldItemChange wrapped = (C09PacketHeldItemChange) packet;

            if (badPacketsA.getValue()) {
                if (wrapped.getSlotId() == lastSlot)
                    event.setCancelled();
                else
                    lastSlot = wrapped.getSlotId();
            }
        }

        if (packet instanceof C0BPacketEntityAction) {
            final C0BPacketEntityAction wrapped = (C0BPacketEntityAction) packet;

            if (badPacketsF.getValue()) {
                if (wrapped.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                    if (sprinting)
                        event.setCancelled();

                    sprinting = true;
                }

                if (wrapped.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                    if (!sprinting)
                        event.setCancelled();

                    sprinting = false;
                }
            }

            if (badPacketsG.getValue()) {
                if (wrapped.getAction() == C0BPacketEntityAction.Action.START_SNEAKING) {
                    if (sneaking)
                        event.setCancelled();

                    sneaking = true;
                }

                if (wrapped.getAction() == C0BPacketEntityAction.Action.STOP_SNEAKING) {
                    if (!sneaking)
                        event.setCancelled();

                    sneaking = false;
                }
            }
        }

        if (fastBreak.getValue()) {
            if (packet instanceof C07PacketPlayerDigging) {
                final C07PacketPlayerDigging wrapped = (C07PacketPlayerDigging) packet;

                if (mc.theWorld.getBlockState(wrapped.getPosition()).getBlock() instanceof BlockAir) return;

                if (wrapped.getStatus() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
                    mc.getNetHandler().addToSendQueueUnregistered(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, wrapped.getPosition(), wrapped.getFacing()));
                }
            }
        }

        if (place.getValue()) {
            if (packet instanceof C08PacketPlayerBlockPlacement) {
                final C08PacketPlayerBlockPlacement placement = (C08PacketPlayerBlockPlacement) packet;

                if (!placement.getPosition().equals(new BlockPos(-1, -1, -1))) {
                    placement.facingX = 0.5f;
                    placement.facingY = 0.5f;
                    placement.facingZ = 0.5f;
                }
            }
        }

        if (higherVersion.getValue()) {
            if (packet instanceof C03PacketPlayer) {
                final C03PacketPlayer wrapped = (C03PacketPlayer) packet;

                if (packet instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                    mc.getNetHandler().addToSendQueueUnregistered(new C08PacketPlayerBlockPlacement(SlotComponent.getItemStack()));
                } else {
                    event.setCancelled();
                    if (wrapped.moving) {
                        mc.getNetHandler().addToSendQueueUnregistered(new C08PacketPlayerBlockPlacement(SlotComponent.getItemStack()));
                        mc.getNetHandler().addToSendQueueUnregistered(new C03PacketPlayer.C06PacketPlayerPosLook(
                                wrapped.x,
                                wrapped.y,
                                wrapped.z,
                                RotationComponent.rotations.x,
                                RotationComponent.rotations.y,
                                wrapped.onGround
                        ));
                    } else if (wrapped.rotating) {
                        mc.getNetHandler().addToSendQueueUnregistered(new C08PacketPlayerBlockPlacement(SlotComponent.getItemStack()));
                        mc.getNetHandler().addToSendQueueUnregistered(new C03PacketPlayer.C06PacketPlayerPosLook(
                                mc.thePlayer.posX,
                                mc.thePlayer.posY,
                                mc.thePlayer.posZ,
                                wrapped.yaw,
                                wrapped.pitch,
                                wrapped.onGround
                        ));
                    } else {
                        mc.getNetHandler().addToSendQueueUnregistered(new C08PacketPlayerBlockPlacement(SlotComponent.getItemStack()));
                        mc.getNetHandler().addToSendQueueUnregistered(new C03PacketPlayer.C06PacketPlayerPosLook(
                                mc.thePlayer.posX,
                                mc.thePlayer.posY,
                                mc.thePlayer.posZ,
                                RotationComponent.rotations.x,
                                RotationComponent.rotations.y,
                                wrapped.onGround
                        ));
                    }
                }
            }
        }
    };

    private void reset() {
        sprinting = false;
        sneaking = false;
        lastSlot = -1;
        inGameTick = 0;
        lastPacketIsItemChange = false;
        hasTickUpdate = false;
        packets.clear();
    }

    private void release() {
        if (mc.getNetHandler() == null || mc.thePlayer == null || mc.theWorld == null) {
            packets.clear();
            return;
        }

        while (!packets.isEmpty()) {
            Packet<INetHandlerPlayClient> packet = packets.poll();

            // 处理包前触发 PacketReceiveEvent
            PacketReceiveEvent packetReceiveEvent = new PacketReceiveEvent(packet);
            Client.INSTANCE.getEventBus().handle(packetReceiveEvent);

            if (packetReceiveEvent.isCancelled()) {
                continue;
            }

            if (mc.getNetHandler() == null || mc.thePlayer == null || mc.theWorld == null || mc.thePlayer.isDead) break;

            // 处理包
            packet.processPacket(mc.getNetHandler());
        }
    }

}
