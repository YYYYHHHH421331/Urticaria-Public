package cn.hackedmc.urticaria.security;

import cn.hackedmc.urticaria.Client;
import cn.hackedmc.urticaria.module.impl.other.AntiExploit;
import cn.hackedmc.urticaria.newevent.annotations.EventLink;
import cn.hackedmc.urticaria.newevent.Listener;
import cn.hackedmc.urticaria.newevent.impl.packet.PacketReceiveEvent;
import cn.hackedmc.urticaria.security.impl.*;
import net.minecraft.client.Minecraft;
import net.minecraft.network.Packet;
import org.reflections.Reflections;

import java.util.ArrayList;
import java.util.Arrays;

public final class ExploitManager extends ArrayList<SecurityFeature> {

    private AntiExploit features;

    public ExploitManager() {
        super();
    }

    public void init() {
        Client.INSTANCE.getEventBus().register(this);

        this.features = Client.INSTANCE.getModuleManager().get(AntiExploit.class);

        if (this.features == null) return;

        this.add(new DemoCheck());
        this.add(new ExplosionCheck());
        this.add(new LoggerRCECheck());
        this.add(new ParticleCheck());
        this.add(new ResourcePackCheck());
        this.add(new TeleportCheck());

    }

    public boolean isInsecure(final Packet<?> packet) {
        // Notification
        return this.features != null && this.features.isEnabled()
                && !Minecraft.getMinecraft().isSingleplayer()
                && this.stream().anyMatch(feature -> feature.handle(packet));
    }

    @EventLink()
    public final Listener<PacketReceiveEvent> onPacketReceive = event -> {
        event.setCancelled(isInsecure(event.getPacket()));
    };
}
